from abc import ABC, abstractmethod
from pathlib import Path
from typing import List, Dict, Any
import networkx as nx

class LanguageAdapter(ABC):
    """
    An abstract base class that defines the interface for language-specific operations.
    Each supported language will have a concrete implementation of this class.
    """

    @abstractmethod
    def map_source_to_test(self, source_file: str, all_tests: List[str]) -> str | None:
        """
        Finds the most likely test file corresponding to a given source file.

        Args:
            source_file: The path to the source file.
            all_tests: A list of all test file paths in the repository.

        Returns:
            The path to the corresponding test file, or None if not found.
        """
        pass

    @abstractmethod
    def get_test_command(self, test_targets: List[str]) -> str:
        """
        Generates the command to run a specific set of tests.

        Args:
            test_targets: A list of test files or specific tests to run.

        Returns:
            The complete shell command string to execute the tests.
        """
        pass

    @abstractmethod
    def build_symbol_index(self, repo_root: Path, file_paths: List[str]) -> Dict[str, List[Dict[str, Any]]]:
        """
        Parses the given files and builds a language-specific index of symbols.

        Args:
            repo_root: The root path of the repository.
            file_paths: A list of file paths to index.

        Returns:
            A dictionary where keys are file paths and values are lists of symbol dictionaries.
        """
        pass

    @abstractmethod
    def build_dependency_graph(self, symbol_index: Dict[str, List[Dict[str, Any]]], file_paths: List[str]) -> nx.DiGraph:
        """
        Builds a dependency graph from the symbol index.

        Args:
            symbol_index: The symbol index generated by this adapter.
            file_paths: The list of files included in the scope.

        Returns:
            A networkx DiGraph representing the dependencies.
        """
        pass
